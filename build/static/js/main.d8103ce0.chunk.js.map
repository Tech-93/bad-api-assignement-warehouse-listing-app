{"version":3,"sources":["services/clothes.js","Components/Item.js","Components/ListRenderer.js","Components/ListSorter.js","Components/Search.js","App.js","index.js"],"names":["productUrl","availabilityUrl","Clothes","getShirts","axios","get","getJackets","getAccessores","getXoon","getAbiplos","getDerp","getReps","getNouke","Item","item","manufacturers","useState","availability","setAvailability","showAvailibility","setShowAvailibility","colors","i","color","length","paddingLeft","name","style","manufacturer","price","id","onClick","undefined","hasOwnProperty","upperCaseId","toUpperCase","find","obj","console","log","DATAPAYLOAD","includes","ProductList","list","type","renderStartpoint","setRenderStartPoint","renderEndpoint","setRenderEndPoint","counter","setCounter","handleNextClick","handlePreviousClick","handleAllClick","handleThousandClick","nextButton","backButton","padding","paddingTop","slice","map","SortedLists","shirts","jackets","accessories","sort","a","b","SearchForItem","items","searchname","setSearchname","searchId","setSearchId","preventReload","event","preventDefault","FilteredItems","filter","tableTop","padding3","padding2","onSubmit","value","onChange","target","displayItems","App","setShirts","setJackets","setAccessories","setItems","xoon","setXoon","abiplos","setAbiplos","derp","setDerp","reps","setReps","nouke","setNouke","setManufacturer","setTimeout","useEffect","clothesService","then","response","data","concat","handleClick","className","Navbar","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","Link","href","as","to","path","Search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8103ce0.chunk.js","sourcesContent":["import axios from 'axios'\nconst productUrl = 'https://bad-api-assignment.reaktor.com/products/'\nconst availabilityUrl = 'https://bad-api-assignment.reaktor.com/availability/'\n\n\nconst getShirts = () => axios.get(productUrl + \"shirts\")\n\nconst getJackets = () => axios.get(productUrl + \"jackets\")\n\nconst getAccessores = () => axios.get(productUrl + \"accessories\")\n\nconst getXoon = () => axios.get(availabilityUrl + \"xoon\")\n\nconst getNouke = () => axios.get(availabilityUrl + \"nouke\")\n\nconst getDerp = () => axios.get(availabilityUrl + \"derp\")\n\nconst getReps = () => axios.get(availabilityUrl + \"reps\")\n\nconst getAbiplos = () => axios.get(availabilityUrl + \"abiplos\")\n\nconst Clothes = {\n    getShirts,\n    getJackets,\n    getAccessores,\n    getXoon,\n    getAbiplos,\n    getDerp,\n    getReps,\n    getNouke\n}\n\nexport default Clothes","import React, { useState } from 'react'\n\nconst Item = ( {item, manufacturers} ) => {\n    const [availability, setAvailability] = useState()\n    const [showAvailibility, setShowAvailibility] = useState(false)\n\n\n    // puts colours in separate variable to better render colours in a readable form.\n    var colors = \"\"\n    for(var i = 0; i < item.color.length -1; i++) {\n        colors += item.color[i] + \", \"\n    }\n    colors+= item.color[item.color.length - 1]\n\n\n    // handles the button for showing an items availability. Shortens loading time to not show availability for all\n    // but to only show for individual items, rather than having every item iterate through manufacturers list and \n    // render their unique results.  \n    const handleClick = () => {\n\n        if(showAvailibility === false) {\n            setShowAvailibility(true)\n        } else {\n            setShowAvailibility(false)\n        }\n\n        if(manufacturers[0] === undefined) {\n            setAvailability(\"Error: no data! Reload page\")\n        \n        } else if(manufacturers[0].hasOwnProperty('id') ) {\n\n            var upperCaseId = item.id.toUpperCase()\n            const availability = manufacturers.find(obj => obj.id === upperCaseId)\n            console.log(availability)\n\n            if(availability === undefined) {\n                setAvailability(\"Error: no data! Reload page\")\n            } else if(availability.DATAPAYLOAD.includes(\"LESSTHAN10\")) {\n                setAvailability(\"Less than 10\")\n            } else if (availability.DATAPAYLOAD.includes(\"OUTOFSTOCK\")) {\n                setAvailability(\"Out of stock\")\n            } else {\n                setAvailability(\"In stock\")\n            }\n        }\n\n    }\n\n\n    // Toggles the rendering of an items availibility data.\n    const toggleShowAvailibility = () => {\n    \n        if(showAvailibility === true) {\n            return <td style={paddingLeft} > {availability} </td>\n        } \n            return <td> </td>\n\n    }\n\n\n    const paddingLeft = {\n        paddingLeft: 10\n    }\n\n    \n    return(\n        <tr>\n          <td > {item.name} </td>\n          <td style={paddingLeft} > {colors} </td>\n          <td style={paddingLeft} > {item.manufacturer} </td>\n          <td style={paddingLeft} > {item.price} </td>\n          <td style={paddingLeft} > {item.id} </td>\n          <td style={paddingLeft} > <button onClick={handleClick}> check availibility </button> </td>\n          {toggleShowAvailibility()}              \n        </tr>\n      )        \n}\n\nexport default Item","import React from 'react'\nimport Item from './Item'\n\nconst ProductList = ( {list, type, renderStartpoint, setRenderStartPoint, renderEndpoint, setRenderEndPoint, manufacturers, counter, setCounter} ) => {\n    \n    // Hides initial setup with a loading courtain if list or manufacturers list is undefined.\n    if(list === undefined || list.length === 0 || manufacturers === undefined || counter !== 5) {\n          return(\n            <div> <h1> Loading...  </h1> </div>\n        )\n    }\n\n\n    // renders items according to a given start point and end point, showing the first 1000 items only to shorten loading time.\n    const renderItems = () => list.slice(renderStartpoint, renderEndpoint).map(item => \n        <Item key={item.id} item={item} manufacturers={manufacturers} />\n        )\n\n\n    // Event handlers for buttons corresponding to the shown list of items.    \n    const handleNextClick = () => {\n        setRenderStartPoint(renderStartpoint + 1000)\n        setRenderEndPoint(renderEndpoint + 1000)\n    }\n\n    const handlePreviousClick = () => {\n        setRenderStartPoint(renderStartpoint - 1000)\n        setRenderEndPoint(renderEndpoint - 1000)\n    }\n\n    const handleAllClick = () => {\n        setCounter(0)\n        setRenderStartPoint(0)\n        setRenderEndPoint(list.length)\n    }\n\n    const handleThousandClick = () => {\n        setRenderStartPoint(0)\n        setRenderEndPoint(1000)\n    }\n\n\n    // Button for viewing the next 1000 items in the list.\n    const nextButton = () => {\n        const label = \"==> next 1000 items\"\n        if(renderEndpoint < list.length) {\n            return <button onClick={handleNextClick}> {label} </button>                       \n\n        }\n    }\n\n\n    // Button for viewing the last 1000 items. \n    const backButton = () => {\n        const label = \"<== previous 1000 items\"\n        if(renderStartpoint > 0) {\n            return <button onClick={handlePreviousClick} > {label} </button>\n        }\n    }\n\n\n    // Function to toggle between the button to show all items in entire list, and button to revert back to showing the first 1000 items only. \n    const toggleAllButton = () => {\n\n        if(renderStartpoint === 0 && renderEndpoint === list.length) {\n            return <button onClick={handleThousandClick} > Show 1000 items only </button>\n        }\n        return <button onClick={handleAllClick} > Show all items </button>\n    }\n    \n        \n    const paddingTop = {\n        paddingTop: 20\n    }\n\n    const paddingLeft = {\n        paddingLeft: 10\n    }\n\n    const padding = {\n        padding: 20\n    }\n\n\n    // The reason for positioning the buttons thus is to avoid accidental clicks forward or backwards to ease the workers patience.     \n    return(\n        <div>\n            <h1 style={padding} > {type} </h1>\n            {toggleAllButton()}\n            {nextButton()}\n            {backButton()}\n        <div style={paddingTop} >\n        <table>\n            <thead>\n                <tr>\n                    <td>  NAME  </td>\n                    <td style={paddingLeft} >  COLOR </td>\n                    <td style={paddingLeft} >  MANUFACTURER  </td>\n                    <td style={paddingLeft} >  PRICE </td>\n                    <td style={paddingLeft} >  ID  </td>\n                    <td style={paddingLeft} > </td>\n                    <td style={paddingLeft} > AVAILIBILITY</td>\n                    \n                </tr>\n                {renderItems()}\n                                \n            </thead>\n        </table>\n        </div>\n        {backButton()}\n        {nextButton()}\n        </div>\n    )\n\n}\n\nexport default ProductList","\nconst SortedLists = (shirts, jackets, accessories) => {\n\n    shirts.sort((a ,b) => {\n        if(a.name < b.name) {\n          return -1\n        }\n    \n        if(a.name > b.name) {\n          return 1\n        }\n    \n        return 0\n      })\n    \n      \n      jackets.sort((a ,b) => {\n        if(a.name < b.name) {\n          return -1\n        }\n    \n        if(a.name > b.name) {\n          return 1\n        }\n    \n        return 0\n      })\n    \n    \n      accessories.sort((a ,b) => {\n        if(a.name < b.name) {\n          return -1\n        }\n    \n        if(a.name > b.name) {\n          return 1\n        }\n    \n        return 0\n      })\n}\n\nexport default SortedLists","import React, { useState} from 'react'\nimport Item from './Item'\n\nconst SearchForItem = ({manufacturers, items, counter, setCounter}) => {\n    const [searchname, setSearchname] = useState('')\n    const [searchId, setSearchId] = useState('')\n\n\n    // Hides initial setup with a loading courtain if list or manufacturers list is undefined.\n    if(items === undefined || items.length === 0 || manufacturers === undefined || counter !== 5) {\n        return(\n            <div> <h1> Loading...  </h1> </div>\n        )\n    }\n\n    \n    // Handles the textfield for Name and Id.\n    const handleSearchNameChange = (event) => {\n        console.log(event.target.value)\n        event.preventDefault()\n        setSearchname(event.target.value.toUpperCase())\n    }\n\n    const handleSearchIdChange = (event) => {\n        setSearchId(event.target.value)\n    }\n\n    // Prevents accidental refresh of page, should a worker hit enter upon searching for item.\n    const preventReload = (event) => {\n        event.preventDefault()\n    }\n\n\n    const FilteredItems = items.filter(item => item.name.includes(searchname))\n    console.log(FilteredItems.length)\n\n\n    // Created a top for the data table so as to have a cleaner return code.\n    const tableTop = () => {\n        return (\n        <tr>\n            <td  >  NAME   </td>\n            <td style={padding3} > COLOR  </td>\n            <td style={padding3} > MANUFACTURER </td>\n            <td style={padding3} > PRICE </td>\n            <td style={padding3}>  ID  </td>\n            <td style={padding3} > </td>\n            <td style={padding3} > AVAILIBILITY</td>\n        </tr>            \n        )\n    }\n\n    // Determines the conditions for how to display which item upon search.\n    const displayItems = () => {\n\n        if(searchname === '' && searchId === '') {\n            return <div style={padding} > enter name or id in search fields </div>\n        \n        } \n        \n        // To quicken search and reduce lag, the items can only be displayed if 100 items match the \n        // name searched for. Hence returning the message to many matches if matches exceed 100 items. \n        else if(FilteredItems.length > 100 && searchId === '') {\n            return <div style={padding} > Too many matches </div>\n        \n        } \n        \n        else if(FilteredItems.length === 0 && searchId === '') {\n            return <div style={padding} > No such name in inventory </div>\n        \n        } \n        \n        // If an item is searched for by its Id property, then the search mechanism will focus on finding item by\n        // Id, rather than by name. Since Ids are more specific than names, a single item only will be displayed \n        // if it matches the Id searched for. Else message will convey that no such Id exists in list. \n        else if (searchId !== '') {\n            const item = items.find(item => item.id === searchId)\n\n            if(item === undefined) {\n                return <div style={padding} > no such id registered </div>\n            }\n            \n            return (\n                <div style={padding2}>\n                    <table>\n                        <thead>\n                            {tableTop()}\n                            <Item key={item.id} item={item} manufacturers={manufacturers} />\n                        </thead>\n                    </table>\n                </div>        \n            ) \n        }\n            \n        return (\n            <div style={padding2}>\n                <table>\n                    <thead>\n                        {tableTop()}\n                        {FilteredItems.map(item => <Item key={item.id} item={item} manufacturers={manufacturers} />)}         \n                    </thead>\n                </table>\n            </div>\n        )\n    }\n\n\n    const padding = {\n        padding: 20\n    }\n\n    const padding2 = {\n        paddingTop: 25\n    }\n\n    const padding3 = {\n        paddingLeft: 10\n    }\n\n\n    return (\n        <div> \n            <div style={padding} >SEARCH FOR ITEM BY: </div>\n            <div  >\n                <form onSubmit={preventReload} > Name:  </form>\n                <input value={searchname} onChange={handleSearchNameChange}  />\n                <form onSubmit={preventReload} > Id:  </form>\n                <input value={searchId} onChange={handleSearchIdChange}  />\n            </div>\n            {displayItems()}\n        </div>\n    )\n}\n\nexport default SearchForItem","import './index.css'\nimport { Navbar, Nav } from 'react-bootstrap'\nimport React, { useState, useEffect } from 'react'\nimport clothesService from './services/clothes'\nimport ProductList from './Components/ListRenderer'\nimport SortedLists from './Components/ListSorter'\nimport SearchForItem from './Components/Search'\nimport {\n  BrowserRouter as Router,\n  Switch, Route, Link\n} from \"react-router-dom\"\n\n\nconst App = () => {\n    const [shirts, setShirts] = useState([])\n    const [jackets, setJackets] = useState([])\n    const [accessories, setAccessories] = useState([])\n  \n    const [items, setItems] = useState([])\n  \n    const [xoon, setXoon] = useState([])\n    const [abiplos, setAbiplos] = useState([])\n    const [derp, setDerp] = useState([])\n    const [reps, setReps] = useState([])\n    const [nouke, setNouke] = useState([])\n  \n    const [manufacturers, setManufacturer] = useState([])\n  \n    const [renderStartpoint, setRenderStartPoint] = useState(0)\n    const [renderEndpoint, setRenderEndPoint] = useState(1000)\n  \n    const [counter, setCounter] =useState(0)\n  \n    // Sets a timeout for loading screen to hide the initial setup of page\n    if(counter !== 5) {\n      console.log(counter)\n          setTimeout(\n              () => setCounter(counter + 1),\n              1000\n            )\n    }\n    \n  \n    // fetches all resources from the apis given into their own lists\n    useEffect(() => {\n      clothesService.getShirts().then(response => {\n        setShirts(response.data)\n      })\n  \n      clothesService.getJackets().then(response => {\n        setJackets(response.data)\n      })\n  \n      clothesService.getAccessores().then(response => {\n        setAccessories(response.data)\n      })\n  \n      clothesService.getXoon().then(response => {\n        console.log(\"XOON\" , response)\n        setXoon(response.data.response)\n        \n      })\n    \n      clothesService.getAbiplos().then(response => {\n        console.log(\"ABIPLOS\", response)\n        setAbiplos(response.data.response)\n      })\n  \n      clothesService.getNouke().then(response => {\n        console.log(\"NOUKE\", response)\n        setNouke(response.data.response)\n      })\n  \n      clothesService.getDerp().then(response => {\n        console.log(\"DERP\", response)\n        setDerp(response.data.response)\n      })\n  \n      clothesService.getReps().then(response => {\n        console.log(\"REPS\", response)\n        setReps(response.data.response)\n      })\n    }, [])\n  \n  \n    // Sorts lists in alphabetical order according to item names.\n    SortedLists(shirts,jackets,accessories)\n  \n  \n    // Hook to fill the manufacturers array with data from all manufacturer APIs into one list. Also fills the items list with all product items for the search engine\n    // to iterate. \n    useEffect(() => {\n      if(xoon.length !== 0 && abiplos.length !== 0 && nouke.length !== 0 && derp.length !== 0 && reps.length !== 0) {\n        setManufacturer(xoon)\n        setManufacturer(manufacturers => manufacturers.concat(abiplos))\n        setManufacturer(manufacturers => manufacturers.concat(nouke))\n        setManufacturer(manufacturers => manufacturers.concat(derp))\n        setManufacturer(manufacturers => manufacturers.concat(reps))\n      }\n  \n      if(shirts !== 0 && jackets.length !== 0 && accessories.length !== 0) {\n        setItems(shirts)\n        setItems(items => items.concat(jackets))\n        setItems(items => items.concat(accessories))\n      }\n  \n    }, [xoon,abiplos, derp, nouke, reps, shirts, jackets, accessories])\n  \n    \n    // logs manufacturers and items lists in order to determine a successful fetch, since the APIS given where not to be changed\n    // according to assignment brief.\n    console.log(\"MANUFACTURERS\", manufacturers)\n    console.log(\"ITEMS\", items)\n  \n  \n    // Sets the startpoint and endpoint for rendering items, which will show the first 1000 only to cut short loading time.\n    const handleClick = () => {\n      setRenderStartPoint(0)\n      setRenderEndPoint(1000)\n    }\n    \n  \n    return (\n      <div className=\"container\"> \n      <Router>\n  \n  \n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#\" as=\"span\">\n                <button onClick={handleClick} > <Link to=\"/\"> SHIRTS </Link> </button>  \n              </Nav.Link>\n              <Nav.Link href=\"#\" as=\"span\">\n                <button onClick={handleClick} > <Link to=\"/jackets\"> JACKETS </Link> </button>\n              </Nav.Link>\n              <Nav.Link href=\"#\" as=\"span\">\n                  <button onClick={handleClick} > <Link to=\"/accessories\"> ACCESSORIES </Link> </button>\n              </Nav.Link>\n              <Nav.Link href=\"#\" as=\"span\">\n                <button > <Link to=\"/itemsearch\"> SEARCH </Link> </button>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n  \n        <Switch>\n          <Route path=\"/jackets\" > \n            <ProductList list={jackets} type=\"Jackets\" manufacturers={manufacturers} \n              renderStartpoint={renderStartpoint} setRenderStartPoint={setRenderStartPoint} \n              renderEndpoint={renderEndpoint} setRenderEndPoint={setRenderEndPoint} \n              counter={counter} setCounter={setCounter}\n            />           \n          </Route>\n  \n          <Route path=\"/accessories\" > \n            <ProductList list={accessories} type=\"Accessories\" manufacturers={manufacturers} \n              renderStartpoint={renderStartpoint} setRenderStartPoint={setRenderStartPoint} \n              renderEndpoint={renderEndpoint} setRenderEndPoint={setRenderEndPoint} \n              counter={counter} setCounter={setCounter}\n              /> \n              \n          </Route>\n  \n         <Route path=\"/itemsearch\" >\n           <SearchForItem items={items} manufacturers={manufacturers} counter={counter} setCounter={setCounter}  />\n         </Route> \n          \n          <Route path=\"/\" > \n            <ProductList list={shirts} type=\"Shirts\" manufacturers={manufacturers} \n              renderStartpoint={renderStartpoint} setRenderStartPoint={setRenderStartPoint} \n              renderEndpoint={renderEndpoint} setRenderEndPoint={setRenderEndPoint} \n              counter={counter} setCounter={setCounter}\n              />\n               \n          </Route>\n        </Switch>\n      </Router>\n      </div>\n    )\n  }\n\n  export default App","import React from 'react'\nimport App from './App'\nimport ReactDOM from 'react-dom'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}